//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import { BaseClient } from "./BaseClient";
export interface IApiClient {

    protected_Call(): Promise<string>;

    auth_Register(request: UserDto): Promise<User>;

    auth_Login(request: UserDto): Promise<TokenResponseDto>;

    auth_RefreshToken(request: RefreshTokenRequestDto): Promise<TokenResponseDto>;

    auth_AuthenticatedOnlyEndpoint(): Promise<string>;

    auth_AdminOnlyEndpoint(): Promise<string>;
}

export class ApiClient extends BaseClient implements IApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5000";
    }

    protected_Call(): Promise<string> {
        let url_ = this.baseUrl + "/api/Protected";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processProtected_Call(_response);
        });
    }

    protected processProtected_Call(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    auth_Register(request: UserDto): Promise<User> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuth_Register(_response);
        });
    }

    protected processAuth_Register(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as User;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    auth_Login(request: UserDto): Promise<TokenResponseDto> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuth_Login(_response);
        });
    }

    protected processAuth_Login(response: Response): Promise<TokenResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as TokenResponseDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenResponseDto>(null as any);
    }

    auth_RefreshToken(request: RefreshTokenRequestDto): Promise<TokenResponseDto> {
        let url_ = this.baseUrl + "/api/Auth/refresh-token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuth_RefreshToken(_response);
        });
    }

    protected processAuth_RefreshToken(response: Response): Promise<TokenResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as TokenResponseDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenResponseDto>(null as any);
    }

    auth_AuthenticatedOnlyEndpoint(): Promise<string> {
        let url_ = this.baseUrl + "/api/Auth/auth-only";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuth_AuthenticatedOnlyEndpoint(_response);
        });
    }

    protected processAuth_AuthenticatedOnlyEndpoint(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    auth_AdminOnlyEndpoint(): Promise<string> {
        let url_ = this.baseUrl + "/api/Auth/admin-manager";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuth_AdminOnlyEndpoint(_response);
        });
    }

    protected processAuth_AdminOnlyEndpoint(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

/** Represents a user in the identity system */
export interface IdentityUserOfString {
    /** Gets or sets the primary key for this user. */
    id?: string | undefined;
    /** Gets or sets the user name for this user. */
    userName?: string | undefined;
    /** Gets or sets the normalized user name for this user. */
    normalizedUserName?: string | undefined;
    /** Gets or sets the email address for this user. */
    email?: string | undefined;
    /** Gets or sets the normalized email address for this user. */
    normalizedEmail?: string | undefined;
    /** Gets or sets a flag indicating if a user has confirmed their email address. */
    emailConfirmed: boolean;
    /** Gets or sets a salted and hashed representation of the password for this user. */
    passwordHash?: string | undefined;
    /** A random value that must change whenever a users credentials change (password changed, login removed) */
    securityStamp?: string | undefined;
    /** A random value that must change whenever a user is persisted to the store */
    concurrencyStamp?: string | undefined;
    /** Gets or sets a telephone number for the user. */
    phoneNumber?: string | undefined;
    /** Gets or sets a flag indicating if a user has confirmed their telephone address. */
    phoneNumberConfirmed: boolean;
    /** Gets or sets a flag indicating if two factor authentication is enabled for this user. */
    twoFactorEnabled: boolean;
    /** Gets or sets the date and time, in UTC, when any user lockout ends. */
    lockoutEnd?: Date | undefined;
    /** Gets or sets a flag indicating if the user could be locked out. */
    lockoutEnabled: boolean;
    /** Gets or sets the number of failed login attempts for the current user. */
    accessFailedCount: number;
}

/** The default implementation of IdentityUser`1 which uses a string as a primary key. */
export interface IdentityUser extends IdentityUserOfString {
}

export interface User extends IdentityUser {
    role: string;
    refreshToken?: string | undefined;
    refreshTokenExpiryTime?: Date | undefined;
}

export interface UserDto {
    username: string;
    password: string;
}

export interface TokenResponseDto {
    accessToken: string;
    refreshToken: string;
}

export interface RefreshTokenRequestDto {
    userId: string;
    refreshToken: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}